/** @type {import("eslint").Linter.Config} */
const configuration = {
	root: true,
	parser: `@typescript-eslint/parser`,
	parserOptions: {
		tsconfigRootDir: __dirname,
		project: [
			`./tsconfig.json`,
		],
	},
	plugins: [
		`@typescript-eslint`,
	],
	extends: [
		`eslint:recommended`,
		`plugin:@typescript-eslint/recommended`,
		`plugin:@typescript-eslint/recommended-requiring-type-checking`,
	],
	rules: {
		'no-redeclare': 'off',
		'@typescript-eslint/no-redeclare': 'error',
		'no-loss-of-precision': 'off',
		'@typescript-eslint/no-loss-of-precision': 'error',
		'no-unreachable-loop': 'error',
		'require-atomic-updates': 'error',
		'curly': ['error', 'all'],
		'default-case': 'error',
		'default-case-last': 'error',
		'dot-location': ['error', 'property'],
		'dot-notation': 'off',
		'@typescript-eslint/dot-notation': 'error',
		'eqeqeq': ['error', 'always', { null: 'ignore' }],
		'guard-for-in': 'error',
		'no-caller': 'error',
		'no-else-return': 'error',
		'no-empty-function': 'off',
		'@typescript-eslint/no-empty-function': 'error',
		'no-eval': 'error',
		'no-extra-label': 'error',
		'no-floating-decimal': 'error',
		'no-implicit-coercion': 'error',
		'no-invalid-this': 'off',
		'@typescript-eslint/no-invalid-this': 'error',
		'no-multi-spaces': 'error',
		'no-new': 'error',
		'no-new-func': 'error',
		'no-new-wrappers': 'error',
		'no-param-reassign': 'error',
		'no-return-assign': 'error',
		'no-return-await': 'off',
		'@typescript-eslint/return-await': 'error',
		'no-self-compare': 'error',
		'no-sequences': 'error',
		'no-throw-literal': 'off',
		'@typescript-eslint/no-throw-literal': 'error',
		'no-unmodified-loop-condition': 'error',
		'no-useless-call': 'error',
		'no-useless-concat': 'error',
		'no-useless-return': 'error',
		'no-void': 'error',
		'no-warning-comments': ['warn', { terms: ['todo'] }],
		'prefer-named-capture-group': 'error',
		'prefer-promise-reject-errors': 'error',
		'prefer-regex-literals': 'error',
		'require-await': 'off',
		'@typescript-eslint/require-await': 'error',
		'yoda': 'error',
		'no-label-var': 'error',
		'no-shadow': 'off',
		'@typescript-eslint/no-shadow': 'error',
		'no-undefined': 'error',
		'array-bracket-newline': ['error', { multiline: true, minItems: 1 }],
		'array-bracket-spacing': ['error', 'never'],
		'array-element-newline': ['error', 'always'],
		'block-spacing': ['error', 'always'],
		'brace-style': 'off',
		'@typescript-eslint/brace-style': ['error', '1tbs'],
		'camelcase': 'error',
		'comma-dangle': 'off',
		'@typescript-eslint/comma-dangle': ['error', 'always-multiline'],
		'comma-spacing': 'off',
		'@typescript-eslint/comma-spacing': 'error',
		'comma-style': 'error',
		'computed-property-spacing': 'error',
		'eol-last': 'error',
		'func-call-spacing': 'off',
		'@typescript-eslint/func-call-spacing': 'error',
		'func-names': ['error', 'as-needed'],
		'function-call-argument-newline': ['error', 'consistent'],
		'function-paren-newline': ['error', 'multiline-arguments'],
		'implicit-arrow-linebreak': 'error',
		'indent': 'off',
		'@typescript-eslint/indent': ['error', 'tab', { "MemberExpression": 0 }],
		'key-spacing': 'error',
		'keyword-spacing': 'off',
		'@typescript-eslint/keyword-spacing': 'error',
		'linebreak-style': ['error', 'unix'],
		'max-statements-per-line': ['error', { max: 1 }],
		'new-parens': 'error',
		'newline-per-chained-call': 'error',
		'no-array-constructor': 'off',
		'@typescript-eslint/no-array-constructor': 'error',
		'no-bitwise': 'error',
		'no-lonely-if': 'error',
		'no-multi-assign': 'error',
		'no-multiple-empty-lines': 'error',
		'no-new-object': 'error',
		'no-plusplus': 'error',
		'no-trailing-spaces': 'error',
		'no-underscore-dangle': 'error',
		'no-unneeded-ternary': 'error',
		'no-whitespace-before-property': 'error',
		'object-curly-newline': ['error', { multiline: true, minProperties: 1, consistent: true }],
		'object-curly-spacing': ['error', 'always'],
		'object-property-newline': 'error',
		'operator-assignment': 'error',
		'padded-blocks': ['error', 'never'],
		'padding-line-between-statements': [
			'error',
			{ blankLine: 'always', prev: '*', next: 'block-like' },
			{ blankLine: 'always', prev: 'block-like', next: '*' },
			{ blankLine: 'always', prev: '*', next: ['return', 'break', 'continue', 'throw'] },
			{ blankLine: 'always', prev: ['const', 'let', 'var'], next: '*' },
			{ blankLine: 'always', prev: '*', next: ['const', 'let', 'var'] },
			{ blankLine: 'any', prev: ['const', 'let', 'var'], next: ['const', 'let', 'var' ] },
			{ blankLine: 'always', prev: ['import'], next: '*' },
			{ blankLine: 'always', prev: '*', next: ['import'] },
			{ blankLine: 'any', prev: ['import'], next: ['import'] },
			{ blankLine: 'always', prev: ['export'], next: '*' },
			{ blankLine: 'always', prev: '*', next: ['export'] },
			{ blankLine: 'any', prev: ['export'], next: ['export'] },
		],
		'prefer-exponentiation-operator': 'error',
		'prefer-object-spread': 'error',
		'quote-props': ['error', 'as-needed'],
		'quotes': 'off',
		'@typescript-eslint/quotes': ['error', 'backtick'],
		'semi': ['error', 'never'],
		'semi-style': ['error', 'first'],
		'space-before-blocks': 'error',
		'space-before-function-paren': 'off',
		'@typescript-eslint/space-before-function-paren': ['error', { anonymous: 'never', named: 'never', asyncArrow: 'always' }],
		'space-in-parens': 'error',
		'space-infix-ops': 'error',
		'space-unary-ops': 'error',
		'spaced-comment': 'error',
		'switch-colon-spacing': 'error',
		'template-tag-spacing': 'error',
		'unicode-bom': 'error',
		'arrow-body-style': ['error', 'as-needed'],
		'arrow-parens': 'error',
		'arrow-spacing': 'error',
		'generator-star-spacing': ['error', { before: false, after: true }],
		'no-confusing-arrow': 'error',
		'no-duplicate-imports': 'off',
		'@typescript-eslint/no-duplicate-imports': 'error',
		'no-useless-computed-key': 'error',
		'no-useless-rename': 'error',
		'no-var': 'error',
		'object-shorthand': 'error',
		'prefer-arrow-callback': 'error',
		'prefer-const': 'error',
		'prefer-numeric-literals': 'error',
		'prefer-rest-params': 'error',
		'prefer-spread': 'error',
		'prefer-template': 'error',
		'rest-spread-spacing': 'error',
		'template-curly-spacing': 'error',
		'yield-star-spacing': ['error', { before: false, after: true }],
		'@typescript-eslint/array-type': ['error', { default: 'generic' }],
		'@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as' }],
		'@typescript-eslint/consistent-type-definitions': ['error', 'type'],
		'@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports' }],
		'@typescript-eslint/explicit-function-return-type': 'error',
		'@typescript-eslint/member-delimiter-style': ['error', { multiline: { delimiter: 'comma', requireLast: true }, singleline: { delimiter: 'comma', requireLast: false } }],
		'@typescript-eslint/method-signature-style': ['error', 'property'],
		'@typescript-eslint/no-base-to-string': 'error',
		'@typescript-eslint/no-implicit-any-catch': 'error',
		'@typescript-eslint/no-invalid-void-type': 'error',
		'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
		'@typescript-eslint/no-unnecessary-condition': 'error',
		'@typescript-eslint/no-unnecessary-type-arguments': 'error',
		'@typescript-eslint/prefer-enum-initializers': 'error',
		'@typescript-eslint/prefer-for-of': 'error',
		'@typescript-eslint/prefer-includes': 'error',
		'@typescript-eslint/prefer-nullish-coalescing': 'error',
		'@typescript-eslint/prefer-optional-chain': 'error',
		'@typescript-eslint/prefer-string-starts-ends-with': 'error',
		'@typescript-eslint/require-array-sort-compare': 'error',
		'@typescript-eslint/strict-boolean-expressions': 'error',
		'@typescript-eslint/type-annotation-spacing': 'error',
		'@typescript-eslint/unified-signatures': 'error',
		'no-unused-expressions': 'off',
		'@typescript-eslint/no-unused-expressions': 'error',
		'no-unused-vars': 'off',
		'@typescript-eslint/no-unused-vars': 'error',
		'no-use-before-define': 'off',
		'@typescript-eslint/no-use-before-define': ['error', 'nofunc'],
		'@typescript-eslint/explicit-module-boundary-types': 'off',
		'no-restricted-syntax': ["error", {
			selector: "CallExpression[callee.property.name='replaceAll'] > Literal[regex.flags=/^[^g]*$/].arguments:first-child",
			message: "Missing 'g' flag."
		}]
	},
}

module.exports = configuration
